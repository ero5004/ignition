<style>
	.leftCol {
		float: left;
		width: 40%;
		margin-right: 10px;
	}
	
	.rightCol {
		float: right;
		width: 59%;
	}
	
</style>


<h1>Add Events to this Simulation</h1>

<div class="leftCol">
Current Events:
<% _.each(events, function(event_local){ %>
<div style="border-style: solid; margin-bottom: 10px; padding: 5px;">
<strong><%= event_local.name %></strong>
<br/>
Description: <%= event_local.description %>
<br/>
Lead Team: <%= event_local.leadTeam.name %>
<br/>
Probability of recurrence if treated: <code><%= event_local.probRecurrenceTreated %></code>
<br/>
Probability of recurrence if untreated: <code><%= event_local.probRecurrenceUntreated %></code>
<br/>
Exponential growth if untreated: <code><%= event_local.untreatedExpGrowth %></code>
<br/>
Time between event checks: <code><%= event_local.untreatedRespawnCheckTime %></code>
<br/>
Scheduled instances: 
<br/>
<table class="data-table">
	<tr>
		<th>Instance Name</th>
		<th>Instance Description</th>
		<th>Spawn Time</th>
	</tr>
	<% _.each(event_local.instances, function(eventInstance){ %>
	<tr>
		<td><%= eventInstance.name %></td>
		<td><%= eventInstance.description %></td>
		<td><%= eventInstance.spawnTime %></td>
	</tr>
	<% }) %>
</table>
<br/>
Resources Required: 
<br/>
<table class="data-table">
	<tr>
		<th>Resource</th>
		<th>Quantity Required</th>
	</tr>
	<% _.each(event_local.requiredResources, function(eventResource){ %>
	<% if(eventResource.quantity > 0){ %>
	<tr>
		<td><%= resources[eventResource.resource].name %></td>
		<td><%= eventResource.quantity %></td>
	</tr>
	<% } %>
	<% }) %>
</table>
<br/>
<a href='/viewEventInstances/<%= simulationId %>/<%= event_local.id %>'>Add Event Instances</a>
<a href='/viewEventResources/<%= simulationId %>/<%= event_local.id %>'>Set Resources Required</a>
<br/>
<a href='#'>edit</a>
<a href='/Event/destroy/<%= event_local.id %>'>delete</a>
</div>
<% }) %>
</div>
<div class="rightCol">
Note: To send a notification to a team, create an event that requires no resources and has no probability of recurrence. It is not possible to send a global notification.
<br/>
<br/>

<form id="addEventForm" method="POST" action="addEvent" class="builderInput">
<p>
<label for="name">Event Name:</label>
<input type="text" id="name"></input>
</p>
<p>
<label for="description">Description:</label>
<textarea id="description"></textarea>
</p>
<p>
<label for="leadTeam">Lead Team:</label>
<select id="leadTeam">
	<option></option>
	<% _.each(teams, function(team){ %>
	<option value="<%= team.id%>"><%= team.name %></option>
	<% })%>
</select>
</p>
<hr/>
<p>
<label for="probRecurrenceTreated">Probability of recurrence if treated (0 - 100):</label>
<input type="text" id="probRecurrenceTreated" size="4" maxlength="4"/>%
</p>
When the event is treated (the necessary resources have been applied and have all finished application), a one-time probability check will be done to determine if this event will spawn one child at a random time in the future.
<br/>
Example: probability = 30%
<br/>
Event is treated at time 200. At this time the simulator will generate a random number between 0 and 100. If this number is less than the probability (30%), a new event instance will be added to the event queue at a random time.
<hr/>
<p>
<label for="probRecurrenceUntreated">Probability of recurrence if untreated (0 - 100):</label>
<input type="text" id="probRecurrenceUntreated" size="4" maxlength="4"/>%
</p>
<p>
<label for="untreatedExpGrowth">Exponential growth if untreated (enter an integer):</label>
<input type="text" id="untreatedExpGrowth"></input>
</p>
<p>
<label for="untreatedRespawnCheckTime">Time between event checks (enter an integer):</label>
<input type="text" id="untreatedRespawnCheckTime"></input>
</p>
<!-- Show number of ticks in simulation here. -->
<br/>
First instance will spawn at time t0. If that event is untreated after (<code>time between event checks</code>) ticks, the simulator will generate (<code>exponential growth if untreated</code>) random numbers between 0 and 100. For each of the random numbers that is less than the (<code>probability of recurrence if untreated</code>), a new child instance of that event will be added to the event instances queue. This will be repeated every (<code>time between event checks</code>) until the event is treated. Each child event will also have the same probabilities of recurrence.
<br/>

Example: 
<ul>
	<li><code>probability of recurrence if untreated</code> = 40%</li>
	<li><code>exponential growth if untreated</code> = 3</li>
	<li><code>time between event checks</code> = 2</li>
</ul>
Every 2 ticks after the first instance spawns, if the instance is untreated, the simulator will generate 3 random numbers between 0 and 100. For each of those numbers that is less than 40, a new instance of the event will be added to the event instance queue. This example event could get out of control very quickly. You will probably want to use probabilities that are lower and times between event checks that are higher.



<hr/>

<input type="button" id="addEvent" value="Add Event" onclick="addEventFn();"></input>
</form>

</div>
<div style="clear: both;"></div>

<br/>
<br/>
Finished adding events?
<input type="button" id="nextStep" value="Next Step" onclick="nextStepClick();"></input>

<script>

	var addEventFn = function ()
	{
		var eventName = $('#name').val();
		var eventDescription = $('#description').val();
		var leadTeam = $('#leadTeam').val();
		var probRecurrenceTreated = $('#probRecurrenceTreated').val();
		var probRecurrenceUntreated = $('#probRecurrenceUntreated').val();
		var untreatedExpGrowth = $('#untreatedExpGrowth').val();
		var untreatedRespawnCheckTime = $('#untreatedRespawnCheckTime').val();
		
		if (!eventName)
		{
			alert("Event name required");
			return false;
		}
		if (!eventDescription)
		{
			alert("Event description required");
			return false;
		}
		if (!leadTeam)
		{
			alert("Lead team for this event required");
			return false;
		}
		if (!probRecurrenceTreated)
		{
			alert("Probability of recurrence if treated required");
			return false;
		}
		if (!probRecurrenceUntreated)
		{
			alert("Probability of recurrence if untreated required");
			return false;
		}
		if (!untreatedExpGrowth)
		{
			alert("Exponential growth if untreated required");
			return false;
		}
		if (!untreatedRespawnCheckTime)
		{
			alert("Time between event checks if untreated required");
			return false;
		}

		
		$.post('/addEvent', {
			simulation: <%= simulationId %>,
			name: eventName,
			description: eventDescription,
			leadTeam: leadTeam,
			probRecurrenceTreated: probRecurrenceTreated,
			probRecurrenceUntreated: probRecurrenceUntreated,
			untreatedExpGrowth: untreatedExpGrowth,
			untreatedRespawnCheckTime, untreatedRespawnCheckTime
		}, function(data, status, jqxhr)
			{
				window.location = '/viewEvents/' + data.simulationId;
			});
		
		
	}
	
	var nextStepClick = function() {
		window.location = '/viewEventACL/<%= simulationId %>';
	}
	
</script>